What happens when you initialize a repository? Why do you need to do it?

Folder through get init is turned into git repository.
An empty repository, with no commits is created. It needs to be done, so I could
start tracking the changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Thanks to the staging area I can incorporate the rule "1 logical change per 
commit". Repository - all the changes in given time. Staging area - just a preparation
before commiting files to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

When more than one logical change since committing was made, all
the changes can be added to the staging area, but I can commit only those that are locically connected.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When I want to try new experimental feature but I still want to fave a working demo.
When I want to make a different version of a program, f.e. different language version.


How do the diagrams help you visualize the branch structure?

Using command git log --graph --oneline [branch_name1] [branch_name2] I can see the graphical
interpretation of the brunch structure and get every commit and its parent in this branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging 2 branches together is 1 branch containing all the commits from both
branches. The diagram shows them as invidual branches joined at the moment we decided to do so.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?